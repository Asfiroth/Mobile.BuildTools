<Project>

  <Target Name="ConfigCopy" BeforeTargets="CoreCompile;XamlG;XamlC;Build">
    <PropertyGroup>
      <BuildResourcesDirectoryName Condition=" '$(BuildResourcesDirectoryName)' == '' ">build</BuildResourcesDirectoryName>
      <BuildResourcesDirRootPath>$([System.IO.Path]::Combine($(SolutionDir), $(BuildResourcesDirectoryName)))</BuildResourcesDirRootPath>
      <InfoPlistTemplateName Condition=" '$(InfoPlistTemplateName)' == '' ">BuildTemplateInfo.plist</InfoPlistTemplateName>
      <BuildTemplateInfoPlistPath>$([System.IO.Path]::Combine('$(BuildResourcesDirRootPath)', '$(InfoPlistTemplateName)'))</BuildTemplateInfoPlistPath>
      <InfoPlistPath>$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', "Info.plist"))</InfoPlistPath>
      <AndroidManifestTemplateName Condition=" '$(AndroidManifestTemplateName)' == '' ">AndroidTemplateManifest.xml</AndroidManifestTemplateName>
      <BuildTemplateAndroidManifestPath>$([System.IO.Path]::Combine('$(BuildResourcesDirRootPath)', "AndroidTemplateManifest.xml"))</BuildTemplateAndroidManifestPath>
      <AndroidManifestPath>$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', "Properties", "AndroidManifest.xml"))
      </AndroidManifestPath>
    </PropertyGroup>

    <Message Text="Checking for Platform Template Configurations to Copy" />

    <Message Condition=" !Exists('$(InfoPlistPath)') And Exists('$(BuildTemplateInfoPlistPath)') And '$(IsUnix)' And '$(IsiOSProject)' " 
             Text="Copying '$(BuildTemplateInfoPListPath)' to '$(InfoPlistPath)'" />
    <Copy SourceFiles="$(BuildTemplateInfoPlistPath)"  
          DestinationFolder="$(InfoPlistPath)"
          Condition=" !Exists('$(InfoPlistPath)') And Exists('$(BuildTemplateInfoPlistPath)') And '$(IsUnix)' And '$(IsiOSProject)' " />

    <Message Condition=" !Exists('$(AndroidManifestPath)') And Exists('$(BuildTemplateAndroidManifestPath)') And '$(IsAndroidProject)' " 
             Text="Copying '$(BuildTemplateAndroidManifestPath)' to '$(AndroidManifestPath)'" />
    <Copy SourceFiles="$(BuildTemplateAndroidManifestPath)"
          DestinationFolder="$(AndroidManifestPath)"
          Condition=" !Exists('$(AndroidManifestPath)') And Exists('$(BuildTemplateAndroidManifestPath)') And '$(IsAndroidProject)' " />

  </Target>

  <!-- <Target Name="BuildHostSecrets">
    <PropertyGroup>
      <BuildHostScriptLocation Condition=" '$(BuildHostScriptLocation)'=='' ">$(SolutionDir)\BuildHostSecrets.ps1</BuildHostScriptLocation>
    </PropertyGroup>
    <Message Condition="!Exists('$(BuildHostScriptLocation)')" Text="Build Host Script Does Not Exist = '$(BuildHostScriptLocation)'" />
    <Exec Command="$(PowerShellExe) -NonInteractive -ExecutionPolicy Unrestricted -Command &quot;&amp; { &amp;$(BuildHostScriptLocation) }&quot;"
          Condition=" Exists('$(BuildHostScriptLocation)') And Exists('$(PowerShellExe)') " />
  </Target> -->

  <Target Name="Secrets" BeforeTargets="CoreCompile;XamlG;XamlC;Build">
    <PropertyGroup>
      <SecretsScriptLocation>$(MSBuildThisFileDirectory)Secrets.ps1</SecretsScriptLocation>
      <JsonSecretsFileName Condition=" '$(JsonSecretsFileName)' == '' ">secrets.json</JsonSecretsFileName>
      <JsonSecretsFilePath>$([System.IO.Path]::Combine("$(ProjectDir)", "$(JsonSecretsFileName)"))</JsonSecretsFilePath>
      <SecretsOutputFileName Condition=" '$(SecretsOutputFileName)' == '' ">Helpers/Secrets.cs</SecretsOutputFileName>
    </PropertyGroup>
    <Message Condition="!Exists('$(SecretsScriptLocation)')" Text="Secrets Script Does Not Exist = '$(SecretsScriptLocation)'" />
    <Message Condition="!Exists('$(PowerShellExe)')" Text="Power Shell Exe Does Not Exist = '$(PowerShellExe)'" />

    <Message Condition="!Exists('$(JsonSecretsFilePath)')" Text="No Secrets Json was found for $(AssemblyName)" />
    <Message Condition="Exists('$(JsonSecretsFilePath)')" Text="Secrets Json was found for $(AssemblyName)" />
    <Exec Command="$(PowerShellExe) -NonInteractive -ExecutionPolicy Unrestricted -Command &quot;&amp; { &amp;$(SecretsScriptLocation) -RootNamespace &apos;$(RootNamespace)&apos; -ProjectPath &apos;$(ProjectDir)&apos; -JsonSecretsFileName &apos;$(JsonSecretsFileName)&apos; -OutputFileName &apos;$(SecretsOutputFileName)&apos; }&quot;"
          Condition=" Exists('$(SecretsScriptLocation)') And Exists('$(PowerShellExe)') " />
  </Target>

</Project>