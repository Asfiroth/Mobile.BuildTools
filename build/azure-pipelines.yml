trigger:
  batch: true
  branches:
    include:
    - master
    - v2.0
  paths:
    include:
    - src
    - tests
    - Directory.build.props
    - Directory.build.targets
    - global.json

pr:
  branches:
    include:
    - master
    - v2.0
  paths:
    include:
    - src
    - tests
    - Directory.build.props
    - Directory.build.targets
    - global.json

name: $(Build.BuildId)

variables:
- name: WindowsAgent
  value: windows-latest
- name: MacAgent
  value: macOS-latest
- name: NuGetVersion
  value: '5.3.1'
- name: BuildConfiguration
  value: 'Release'
- name: BuildPlatform
  value: 'Any CPU'
- name: TargetSolution
  value: 'Mobile.BuildTools.sln'
- group: 'Code Signing'
- group: 'AppSigning'
- group: 'GitHubRelease'

stages:
- stage: Build
  displayName: Run Build
  jobs:
  - template: jobs/build-library.yml
    parameters:
      solution: Mobile.BuildTools.sln
      nugetVersion: $(NuGetVersion)

- stage: Test
  displayName: Run Tests
  dependsOn: Build
  jobs:
  - template: jobs/integration-tests.yml
    parameters:
      solution: E2E/E2E.sln
      nugetVersion: $(NuGetVersion)
      vmImage: $(WindowsAgent)
      jobName: IntegrationTestsWin
      displayName: Integration Tests (Windows)

  - template: jobs/integration-tests.yml
    parameters:
      solution: E2E/E2E.sln
      nugetVersion: $(NuGetVersion)
      vmImage: $(MacAgent)
      jobName: IntegrationTestsMac
      displayName: Integration Tests (Mac)

  # - template: jobs/android.yml
  #   parameters:
  #     solution: E2EApp.sln
  #     baseSolutionDirectory: E2E/E2EApp
  #     appRootDirectory: E2E/E2EApp/E2EApp.Android
  #     csprojName: E2EApp.Android.csproj
  #     nugetVersion: $(NuGetVersion)

  # - template: jobs/ios.yml
  #   parameters:
  #     solution: E2EApp.sln
  #     baseSolutionDirectory: E2E/E2EApp
  #     appRootDirectory: E2E/E2EApp/E2EApp.iOS
  #     csprojName: E2EApp.iOS.csproj
  #     nugetVersion: $(NuGetVersion)

- stage: Release
  displayName: Deploy NuGet Artifacts
  dependsOn: Test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: MyGet
    displayName: MyGet.org
    environment: MyGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'MyGet-DanSiegel'
  - deployment: NuGet
    displayName: NuGet.org
    environment: NuGet
    condition: and(succeeded(),or(eq(variables['IS_PREVIEW'], true), eq(variables['IS_RELEASE'], true)))
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
             try {
                 $artifactDirectory = Join-Path -Path $env:PIPELINE_WORKSPACE -ChildPath 'NuGet'
                 Write-Host "Currect working directory - $artifactDirectory"
                 $nupkg = Get-ChildItem -Path $artifactDirectory -Filter *.nupkg -Recurse | Select-Object -First 1
                 if($null -eq $nupkg)
                 {
                     Throw "No NuGet Package could be found in the current directory"
                 }
                 Write-Host "Package Name $($nupkg.Name)"
                 $nupkg.Name -match '^(.*?)\.((?:\.?[0-9]+){3,}(?:[-a-z]+)?)\.nupkg$'
                 $VersionName = $Matches[2]
                 $IsPreview = $VersionName -match '-pre$'
                 $ReleaseDisplayName = $VersionName

                 if($null -eq $env:IS_PREVIEW)
                 {
                     Write-Output ("##vso[task.setvariable variable=IS_PREVIEW;]$IsPreview")
                 }
                 if($true -eq $IsPreview)
                 {
                     $baseVersion = $VersionName.Split('-')[0]
                     $ReleaseDisplayName = "$baseVersion - Preview"
                 }
                 Write-Host "Version Name - $VersionName"
                 Write-Host "Release Display Name - $ReleaseDisplayName"

                 Write-Output ("##vso[task.setvariable variable=VersionName;]$VersionName")
                 Write-Output ("##vso[task.setvariable variable=ReleaseDisplayName;]$ReleaseDisplayName")
             }
             catch {
                 Write-Error $_
                 exit 1
             }
            displayName: Process Artifacts for Release

          - task: GithubRelease@0
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: 'DanSiegel - GitHub'
              title: '$(ReleaseDisplayName)'
              tagSource: manual
              tag: 'v$(VersionName)'
              isPreRelease: $(IS_PREVIEW)
              assets: |
               $(Pipeline.Workspace)/**/*.nupkg
              isDraft: true
              addChangeLog: true

          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet'


