{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started \u00b6 The Mobile.BuildTools is an easy to use NuGet package that adds new MSBuild targets to your build pipeline. In essenence it teaches MSBuild some new tricks to help make your DevOps easier and help you follow better practices while developing your application. The bulk of support is around Xamarin.Android and Xamarin.iOS and it will work regardless of whether you are using the native tooling, Xamarin.Forms, or Uno to create your UI. The Mobile.BuildTools are a collection of MSBuild Tasks that help make MSBuild smarter in handling the build process for CI/CD with Mobile Applications. The library was born from a desire to share build processes from one app to the next without having to copy and paste a bunch of build scripts each of which could easily end up out of date. Because the Mobile.BuildTools simply provides MSBuild Tasks, this adds nothing to the size of your application and if being used on a project that will be packed and shared, you can set the PackageReference's PrivateAssets to all. Support \u00b6 This project is maintained by Dan Siegel. If this project has helped you please consider sponsoring Dan on GitHub. Your contributions help make great open source projects possible. Latest NuGet's \u00b6 Package NuGet MyGet Mobile.BuildTools Mobile.BuildTools.Configuration Want to consume the CI packages? You can add this as a NuGet.config in your project root and Visual Studio will automatically pick up the configuration to provide packages from the CI Feed. Note that packages from this feed have passed all of the tests, but may have code that is still unstable. <configuration> <packageSources> <clear /> <add key= \"DanSiegel-MyGet\" value= \"https://www.myget.org/F/dansiegel/api/v3/index.json\" /> <add key= \"NuGet.org\" value= \"https://api.nuget.org/v3/index.json\" /> </packageSources> </configuration>","title":"Getting Started"},{"location":"#getting-started","text":"The Mobile.BuildTools is an easy to use NuGet package that adds new MSBuild targets to your build pipeline. In essenence it teaches MSBuild some new tricks to help make your DevOps easier and help you follow better practices while developing your application. The bulk of support is around Xamarin.Android and Xamarin.iOS and it will work regardless of whether you are using the native tooling, Xamarin.Forms, or Uno to create your UI. The Mobile.BuildTools are a collection of MSBuild Tasks that help make MSBuild smarter in handling the build process for CI/CD with Mobile Applications. The library was born from a desire to share build processes from one app to the next without having to copy and paste a bunch of build scripts each of which could easily end up out of date. Because the Mobile.BuildTools simply provides MSBuild Tasks, this adds nothing to the size of your application and if being used on a project that will be packed and shared, you can set the PackageReference's PrivateAssets to all.","title":"Getting Started"},{"location":"#support","text":"This project is maintained by Dan Siegel. If this project has helped you please consider sponsoring Dan on GitHub. Your contributions help make great open source projects possible.","title":"Support"},{"location":"#latest-nugets","text":"Package NuGet MyGet Mobile.BuildTools Mobile.BuildTools.Configuration Want to consume the CI packages? You can add this as a NuGet.config in your project root and Visual Studio will automatically pick up the configuration to provide packages from the CI Feed. Note that packages from this feed have passed all of the tests, but may have code that is still unstable. <configuration> <packageSources> <clear /> <add key= \"DanSiegel-MyGet\" value= \"https://www.myget.org/F/dansiegel/api/v3/index.json\" /> <add key= \"NuGet.org\" value= \"https://api.nuget.org/v3/index.json\" /> </packageSources> </configuration>","title":"Latest NuGet's"},{"location":"build-versioning/","text":"Build Versioning \u00b6","title":"Build Versioning"},{"location":"build-versioning/#build-versioning","text":"","title":"Build Versioning"},{"location":"faq/","text":"F.A.Q. \u00b6 Should every value in my Secrets be \"Secret\"? \u00b6 The Secrets Class is a great way to prevent security vulnerbilities created from checking into source control things like Client Id's, Consumer Secrets, or Connection Strings. But it really doesn't have to stop there. In fact the Secrets class is a great way of setting the configuration environment for your application at build. Should your build point to the Dev, Stage, or Production API? This is also a great way of being very intentional about it. Does the Secrets class have to be in the Helpers namespace or named Secrets? \u00b6 In short no it does not. This has always been configurable though it is much easier with version 2.0 as you can just update the Configuration for the project. Do all of the things that the Mobile.BuildTools is capable of execute every time I run a build? \u00b6 We try to be smart about what we will and will not do. There is an initialization task that will run on each build which evaluates your project to determine if certain things should or should not occur. For instance if there are no SCSS files in your project that Target will not fire, similarly if you have disabled a target explicitly it should be skipped during the build.","title":"F.A.Q."},{"location":"faq/#faq","text":"","title":"F.A.Q."},{"location":"faq/#should-every-value-in-my-secrets-be-secret","text":"The Secrets Class is a great way to prevent security vulnerbilities created from checking into source control things like Client Id's, Consumer Secrets, or Connection Strings. But it really doesn't have to stop there. In fact the Secrets class is a great way of setting the configuration environment for your application at build. Should your build point to the Dev, Stage, or Production API? This is also a great way of being very intentional about it.","title":"Should every value in my Secrets be \"Secret\"?"},{"location":"faq/#does-the-secrets-class-have-to-be-in-the-helpers-namespace-or-named-secrets","text":"In short no it does not. This has always been configurable though it is much easier with version 2.0 as you can just update the Configuration for the project.","title":"Does the Secrets class have to be in the Helpers namespace or named Secrets?"},{"location":"faq/#do-all-of-the-things-that-the-mobilebuildtools-is-capable-of-execute-every-time-i-run-a-build","text":"We try to be smart about what we will and will not do. There is an initialization task that will run on each build which evaluates your project to determine if certain things should or should not occur. For instance if there are no SCSS files in your project that Target will not fire, similarly if you have disabled a target explicitly it should be skipped during the build.","title":"Do all of the things that the Mobile.BuildTools is capable of execute every time I run a build?"},{"location":"images/","text":"Image Asset Generation \u00b6","title":"Image Assets"},{"location":"images/#image-asset-generation","text":"","title":"Image Asset Generation"},{"location":"manifests/","text":"App Manifests \u00b6","title":"App Manifests"},{"location":"manifests/#app-manifests","text":"","title":"App Manifests"},{"location":"release-notes/","text":"Release Notes \u00b6","title":"Release Note Generation"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"xamarin-scss-to-css/","text":"SCSS to Xamarin.Forms CSS \u00b6 CSS support in Xamarin.Forms is the most revolutionary change to Styling XAML. CSS though is traditionally problematic on larger projects as it can quickly become hard to maintain, and error prone as it lacks reusability of common values which could include setting various properties or reusing the same color from one element to the next. With SCSS you gain the ability to break your stylesheets into logical reusable chunks and you gain the ability to define variables and functions for creating your styles. The Mobile.BuildTools now supports Xamarin.Forms CSS generation as part of the build process. Valid Xamarin.Forms CSS \u00b6 Note The Xamarin.Forms CSS spec does not generate valid CSS and as a result SCSS will not support the use of ^. ^ button { background-color : transparent ; } . primary ^ button { background-color : #78909c ; } The Mobile.BuildTools will post process your SCSS to generate valid CSS for Xamarin.Forms when using the selectors any or all . Valid SCSS used by the Mobile.BuildTools \u00b6 button : any { background-color : transparent ; } . primary button : all { background-color : #78909c ; } To get started, simply add any scss format stylesheets you want to your project and make sure that the build action is set to None . The Mobile.BuildTools will automatically detect them and generate a CSS file for each non-partial (anything not starting with an underscore). For more information on how to get started with SCSS see the Getting Started Guide from LibSass.","title":"Xamarin.Forms CSS"},{"location":"xamarin-scss-to-css/#scss-to-xamarinforms-css","text":"CSS support in Xamarin.Forms is the most revolutionary change to Styling XAML. CSS though is traditionally problematic on larger projects as it can quickly become hard to maintain, and error prone as it lacks reusability of common values which could include setting various properties or reusing the same color from one element to the next. With SCSS you gain the ability to break your stylesheets into logical reusable chunks and you gain the ability to define variables and functions for creating your styles. The Mobile.BuildTools now supports Xamarin.Forms CSS generation as part of the build process.","title":"SCSS to Xamarin.Forms CSS"},{"location":"xamarin-scss-to-css/#valid-xamarinforms-css","text":"Note The Xamarin.Forms CSS spec does not generate valid CSS and as a result SCSS will not support the use of ^. ^ button { background-color : transparent ; } . primary ^ button { background-color : #78909c ; } The Mobile.BuildTools will post process your SCSS to generate valid CSS for Xamarin.Forms when using the selectors any or all .","title":"Valid Xamarin.Forms CSS"},{"location":"xamarin-scss-to-css/#valid-scss-used-by-the-mobilebuildtools","text":"button : any { background-color : transparent ; } . primary button : all { background-color : #78909c ; } To get started, simply add any scss format stylesheets you want to your project and make sure that the build action is set to None . The Mobile.BuildTools will automatically detect them and generate a CSS file for each non-partial (anything not starting with an underscore). For more information on how to get started with SCSS see the Getting Started Guide from LibSass.","title":"Valid SCSS used by the Mobile.BuildTools"},{"location":"appendix/upgrade/","text":"Upgrading from 1.X \u00b6 The Mobile.BuildTools 1.X is extremely reliable for generating app secrets! But 2.0 is much better at it. There were a number of factors that went into determining what we should and should not be doing. Secrets \u00b6 There is a lot about the Secrets class generation that has been completely refactored. The result is that you have far more options when generating secrets than you did in 1.X. The big thing to consider is that you will need to add a configuration for the Project in the solution you want to add secrets for.","title":"Upgrading from 1.X"},{"location":"appendix/upgrade/#upgrading-from-1x","text":"The Mobile.BuildTools 1.X is extremely reliable for generating app secrets! But 2.0 is much better at it. There were a number of factors that went into determining what we should and should not be doing.","title":"Upgrading from 1.X"},{"location":"appendix/upgrade/#secrets","text":"There is a lot about the Secrets class generation that has been completely refactored. The result is that you have far more options when generating secrets than you did in 1.X. The big thing to consider is that you will need to add a configuration for the Project in the solution you want to add secrets for.","title":"Secrets"},{"location":"config/","text":"App Configuration for Mobile Projects \u00b6 Mobile Apps unlike traditional Desktop and Web projects are limiting for developers because you must define configuration values at build and not on deployment. The Mobile.BuildTools is here to help you solve this problem and meet you where you are. Developers have different needs at different times. Many times","title":"Intro"},{"location":"config/#app-configuration-for-mobile-projects","text":"Mobile Apps unlike traditional Desktop and Web projects are limiting for developers because you must define configuration values at build and not on deployment. The Mobile.BuildTools is here to help you solve this problem and meet you where you are. Developers have different needs at different times. Many times","title":"App Configuration for Mobile Projects"},{"location":"config/app.config/","text":"App.config \u00b6 The Mobile.BuildTools now includes support for using an app.config. It's important to note that we do not use the System.Configuration.ConfigurationManager, and instead use a lightweight custom implementation that allows you to initialize custom configurations at runtime which may not follow the typical app.config naming or perform transformations at runtime though this is generally not a good practice. By default Mobile.BuildTools will look for any file in the root of the head project named app.config or app.*.config. All of those files will be bundled automatically into the native app. If your file has an environment config for the build configuration such as app.debug.config this will perform a transform during build on the bundled app.config.","title":"Intro"},{"location":"config/app.config/#appconfig","text":"The Mobile.BuildTools now includes support for using an app.config. It's important to note that we do not use the System.Configuration.ConfigurationManager, and instead use a lightweight custom implementation that allows you to initialize custom configurations at runtime which may not follow the typical app.config naming or perform transformations at runtime though this is generally not a good practice. By default Mobile.BuildTools will look for any file in the root of the head project named app.config or app.*.config. All of those files will be bundled automatically into the native app. If your file has an environment config for the build configuration such as app.debug.config this will perform a transform during build on the bundled app.config.","title":"App.config"},{"location":"config/app.config/in-code/","text":"Using It In Code \u00b6","title":"In Code"},{"location":"config/app.config/in-code/#using-it-in-code","text":"","title":"Using It In Code"},{"location":"config/app.config/transformations/","text":"Transformations \u00b6 A basic app config may look like: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <configuration> <appSettings> <add key= \"foo\" value= \"my foo\" /> <add key= \"bar\" value= \"my bar\" /> </appSettings> <connectionStrings> <add name= \"test\" providerName= \"my provider\" connectionString= \"my connection string\" /> </connectionStrings> </configuration> A Trasnsformation config may look like: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <configuration xmlns:xdt= \"http://schemas.microsoft.com/XML-Document-Transform\" > <appSettings> <add key= \"foo\" value= \"transformed\" xdt:Transform= \"Replace\" /> <add key= \"Environment\" value= \"Dev\" xdt:Transform= \"Insert \" /> </appSettings> </configuration> After running the transform from either the automatic build task, at runtime or with the .NET CLI Tool the resulting app.config will look like: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <configuration> <appSettings> <add key= \"foo\" value= \"transformed\" /> <add key= \"bar\" value= \"my bar\" /> <add key= \"Environment\" value= \"Dev\" /> </appSettings> <connectionStrings> <add name= \"test\" providerName= \"my provider\" connectionString= \"my connection string\" /> </connectionStrings> </configuration> While the XDT namespace allows you to radically change your app.config. In most cases however you will only need to focus on the xdt:Transform attribute. Replace Insert InsertBefore(XPath expression) InsertAfter(XPath expression) Remove Remove All","title":"Transformations"},{"location":"config/app.config/transformations/#transformations","text":"A basic app config may look like: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <configuration> <appSettings> <add key= \"foo\" value= \"my foo\" /> <add key= \"bar\" value= \"my bar\" /> </appSettings> <connectionStrings> <add name= \"test\" providerName= \"my provider\" connectionString= \"my connection string\" /> </connectionStrings> </configuration> A Trasnsformation config may look like: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <configuration xmlns:xdt= \"http://schemas.microsoft.com/XML-Document-Transform\" > <appSettings> <add key= \"foo\" value= \"transformed\" xdt:Transform= \"Replace\" /> <add key= \"Environment\" value= \"Dev\" xdt:Transform= \"Insert \" /> </appSettings> </configuration> After running the transform from either the automatic build task, at runtime or with the .NET CLI Tool the resulting app.config will look like: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <configuration> <appSettings> <add key= \"foo\" value= \"transformed\" /> <add key= \"bar\" value= \"my bar\" /> <add key= \"Environment\" value= \"Dev\" /> </appSettings> <connectionStrings> <add name= \"test\" providerName= \"my provider\" connectionString= \"my connection string\" /> </connectionStrings> </configuration> While the XDT namespace allows you to radically change your app.config. In most cases however you will only need to focus on the xdt:Transform attribute. Replace Insert InsertBefore(XPath expression) InsertAfter(XPath expression) Remove Remove All","title":"Transformations"},{"location":"config/secrets/basics/","text":"App Secrets \u00b6 The Secrets class is autogenerated from a secrets.json file. This must be a simple Dictionary of keys and values. { \"ClientId\" : \"{client id}\" , \"ClientSecret\" : \"{client secret}\" } Critical Note Be sure to add the secrets.json to your .gitignore. If this is accidently checked into source control it negates the entire purpose of use the Secrets from the Mobile.BuildTools!","title":"Basics"},{"location":"config/secrets/basics/#app-secrets","text":"The Secrets class is autogenerated from a secrets.json file. This must be a simple Dictionary of keys and values. { \"ClientId\" : \"{client id}\" , \"ClientSecret\" : \"{client secret}\" } Critical Note Be sure to add the secrets.json to your .gitignore. If this is accidently checked into source control it negates the entire purpose of use the Secrets from the Mobile.BuildTools!","title":"App Secrets"},{"location":"config/secrets/configuration/","text":"","title":"Configuration"},{"location":"continuous-integration/platforms/","text":"Build Platforms \u00b6 Because the Mobile.BuildTools is a collection of MSBuild Targets, it works absolutely everywhere that MSBuild is available and building your project. It doesn't matter if you use Cake, or CLI scripts, or which CI platform you use. In general all of the common CI Platforms that Xamarin Developers might use are covered this includes: App Center Azure DevOps Appveyor Jenkins","title":"Platforms"},{"location":"continuous-integration/platforms/#build-platforms","text":"Because the Mobile.BuildTools is a collection of MSBuild Targets, it works absolutely everywhere that MSBuild is available and building your project. It doesn't matter if you use Cake, or CLI scripts, or which CI platform you use. In general all of the common CI Platforms that Xamarin Developers might use are covered this includes: App Center Azure DevOps Appveyor Jenkins","title":"Build Platforms"},{"location":"continuous-integration/setup/","text":"Continuous Integration Setup \u00b6 Obviously if we checked in a json file with our secrets it would negate the entire point of trying to secure our code base. The Build Tools include a Build Host Secrets task that executes prior to the Secrets Generation. This task will execute when the secrets json file does not exist in an attempt to generate the missing json file. This is designed to handle secrets across multiple projects. By default we assume you have a single shared project such as a .NET Standard library, and one or more platform projects like iOS, Android, UWP, macOS, & Tizen. To override the secrets prefix for any project you simply need to provide a value for BuildHostSecretPrefix Platform Secrets Prefix Android DroidSecret_ iOS iOSSecret_ UWP UWPSecret_ macOS MacSecret_ Tizen TizenSecret_ Default Secret_","title":"Setup"},{"location":"continuous-integration/setup/#continuous-integration-setup","text":"Obviously if we checked in a json file with our secrets it would negate the entire point of trying to secure our code base. The Build Tools include a Build Host Secrets task that executes prior to the Secrets Generation. This task will execute when the secrets json file does not exist in an attempt to generate the missing json file. This is designed to handle secrets across multiple projects. By default we assume you have a single shared project such as a .NET Standard library, and one or more platform projects like iOS, Android, UWP, macOS, & Tizen. To override the secrets prefix for any project you simply need to provide a value for BuildHostSecretPrefix Platform Secrets Prefix Android DroidSecret_ iOS iOSSecret_ UWP UWPSecret_ macOS MacSecret_ Tizen TizenSecret_ Default Secret_","title":"Continuous Integration Setup"}]}